AppType=StandardJava
Build1=Default,com.puterise.libget.nonui
Group=Default Group
Library1=javaobject
Library2=jcore
Library3=jokhttputils2
Library4=json
NumberOfFiles=0
NumberOfLibraries=4
NumberOfModules=0
Version=10.3
@EndOfDesignText@
'Non-UI application (console / server application)
#Region Project Attributes 
#CommandLineArgs:
#MergeLibraries: True
#Macro: Title, Objects, ide://run?file=%WINDIR%\SysWOW64\explorer.exe&Args=%PROJECT%\Objects
#Macro: Title, Rename, ide://run?file=%WINDIR%\System32\cmd.exe&Args=/c&Args=ren&Args=result.jar&Args=libget-non-ui.jar
#If Release
#CustomBuildAction: 2, C:\Windows\System32\cmd.exe, /c copy %PROJECT%\Objects\result.jar %ADDITIONAL%\..\B4X\libget-non-ui.jar
#End If
#End Region

Sub Process_Globals
	Private AddLibPath As String
	Private B4AAddLibPath As String
	Private B4JAddLibPath As String
	Private B4XAddLibPath As String
	Private LibsCount As Int
	Private Checked As Int
End Sub

Sub AppStart (Args() As String)
	Log("libget-non-ui (v2.50) started...")
	If Args.Length = 0 Then
		Log("Project's path not provided")
		Log("libget-non-ui ended")
		ExitApplication
	End If
	If Args.Length = 2 Then
		CheckLibrary(Args(0), Args(1))
	Else
		CheckLibrary(Args(0), "False")
	End If
	StartMessageLoop
End Sub

Sub CheckLibrary (Dir As String, ForceUpdate As String)
	If File.Exists(Dir, "libs.json") = False Then
		Log("libs.json not found")
		ExitApplication
	End If
	Log("libs.json found")
	Dim SystemEnvironment As Map = getSystemEnvironment
	Dim B4JSettingsDir As String = SystemEnvironment.Get("APPDATA") & "\Anywhere Software\B4J"
	If File.Exists(B4JSettingsDir, "b4xV5.ini") = False Then
		Log("B4J ini file not found")
		ExitApplication
	End If
	Dim List1 As List = File.ReadList(B4JSettingsDir, "b4xV5.ini")
	For i = 0 To List1.Size - 1
		Dim Line As String = List1.Get(i)
		If Line.Contains("AdditionalLibrariesFolder") Then ' File contains BOM Chr(0xFEFF)
			AddLibPath = Line.SubString(Line.IndexOf("=")+1)
			'Log("Additional Libraries folder: " & AddLibPath)
			Exit
		End If
	Next
	If File.Exists(File.Combine(AddLibPath, "B4A"), "") Then
		B4AAddLibPath = File.Combine(AddLibPath, "B4A")
	Else
		B4AAddLibPath = AddLibPath
	End If
	If File.Exists(File.Combine(AddLibPath, "B4J"), "") Then
		B4JAddLibPath = File.Combine(AddLibPath, "B4J")
	Else
		B4JAddLibPath = AddLibPath
	End If
	If File.Exists(File.Combine(AddLibPath, "B4X"), "") Then
		B4XAddLibPath = File.Combine(AddLibPath, "B4X")
	Else
		B4XAddLibPath = AddLibPath
	End If
	
	Dim json As String = File.ReadString(Dir, "libs.json")
	Dim libs As Map = json.As(JSON).ToMap
	Dim Libraries As List = libs.Get("Libraries")
	LibsCount = Libraries.Size
	If LibsCount = 0 Then
		Log("libget-non-ui ended")
		ExitApplication
	End If
	Checked = 0
	
	Log("ForceUpdate=" & ForceUpdate)
	For Each Library As Map In Libraries
		'Log(Library.Get("Name"))
		'Log(Library.Get("Platform"))
		'Log(Library.Get("Version"))
		'Log(Library.Get("Link"))
		Dim LibName As String = Library.Get("Name")
		Dim Platform As String = Library.Get("Platform")
		Dim DownloadLink As String = Library.Get("Link")
		If Platform = "B4A" Then
			Dim LibPath As String = B4AAddLibPath
		Else If Platform = "B4J" Then
			Dim LibPath As String = B4JAddLibPath
		Else If Platform = "B4X" Then
			Dim LibPath As String = B4XAddLibPath
		Else
			CheckAndLog
		End If
		If File.Exists(LibPath, LibName) Then
			Log($"${LibName} found"$)
			' Check version
			If LibName.EndsWith(".b4xlib") Then
				'Log("Checking version...")
				Dim ver As String = GetB4XLibVersion(File.Combine(LibPath, LibName))
				Dim CurrentVersion As Double
				If IsNumber(ver) Then CurrentVersion = ver
				Log($"CurrentVersion=$1.2{CurrentVersion}"$)
				Dim RequiredVersion As Double = Library.Get("Version")
				Log($"RequiredVersion=$1.2{RequiredVersion}"$)
				If ForceUpdate.EqualsIgnoreCase("True") Then
					If RequiredVersion <> CurrentVersion Then
						Wait For ( Download(LibName, LibPath, DownloadLink) ) Complete (Success As Boolean)
					End If
				Else
					If RequiredVersion > CurrentVersion Then
						' Do no update if major is not same
						If RequiredVersion.As(Int) = CurrentVersion.As(Int) Then
							Wait For ( Download(LibName, LibPath, DownloadLink) ) Complete (Success As Boolean)
						Else
							Log("Lib not updated. Manually rename your current version.")
						End If
					End If
				End If
			End If
		Else
			Log($"${LibName} not found"$)
			Wait For ( Download(LibName, LibPath, DownloadLink) ) Complete (Success As Boolean)
		End If
		CheckAndLog
	Next
End Sub

' Reads the version from a .b4xlib file (B4A / B4J)
Sub GetB4XLibVersion (LibPath As String) As String
	Dim jZip As JavaObject
	jZip.InitializeNewInstance("java.util.zip.ZipFile", Array(LibPath))
	Dim ZipEntry As JavaObject = jZip.RunMethod("getEntry", Array("manifest.txt"))
	If ZipEntry.IsInitialized Then
		Dim jInputStream As JavaObject = jZip.RunMethod("getInputStream", Array(ZipEntry))
		Dim b() As Byte = Bit.InputStreamToBytes(jInputStream)
		Dim txt As String = BytesToString(b, 0, b.Length, "utf8")
		Dim lines() As String = Regex.Split(CRLF, txt)
		For Each line As String In lines
			If line.StartsWith("Version=") Then
				Return line.SubString(8) ' Extract version number
			End If
		Next
	End If
	Return "Unknown"
End Sub

Sub Download (FileName As String, FileDirectory As String, DownloadLink As String) As ResumableSub
	Log($"Downloading ${FileName}..."$)
	Dim success As Boolean
	Dim job As HttpJob
	job.Initialize("", Me)
	job.Download(DownloadLink)
	Wait For (job) JobDone(job As HttpJob)
	If job.Success Then
		Dim out As OutputStream = File.OpenOutput(FileDirectory, FileName, False)
		File.Copy2(job.GetInputStream, out)
		out.Close
		Log($"${FileName} downloaded"$)
		success = True
	Else
		Log(job.ErrorMessage)
	End If
	job.Release
	Return success
End Sub

Sub CheckAndLog
	Checked = Checked + 1
	If Checked = LibsCount Then
		Log("libget-non-ui ended")
		ExitApplication
	End If
End Sub

Sub getSystemEnvironment As Map
	Dim jo As JavaObject
	jo.InitializeStatic("java.lang.System")
	Dim Env As Map = jo.RunMethod("getenv", Null)
	Return Env
End Sub